-- MySQL Script generated by MySQL Workbench
-- Fri Jun  2 21:15:03 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Heavy_metal
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Heavy_metal
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Heavy_metal` DEFAULT CHARACTER SET utf8 ;
USE `Heavy_metal` ;

-- -----------------------------------------------------
-- Table `usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `usuarios` (
  `num_documento` INT NOT NULL,
  `tipo_documento` VARCHAR(45) NOT NULL,
  `seudonimo` VARCHAR(45) NOT NULL,
  `apellido_usuario` VARCHAR(45) NOT NULL,
  `nombre_usuario` VARCHAR(45) NOT NULL,
  `telefono` INT NOT NULL,
  `contraseña` VARBINARY(20) NOT NULL,
  `correo` VARCHAR(45) NOT NULL,
  `rol` VARCHAR(45) NOT NULL,
  `usuario_registra` INT NOT NULL,
  `fecha_registro` TIMESTAMP NOT NULL,
  `fecha_modificacion` TIMESTAMP NULL,
  PRIMARY KEY (`num_documento`),
  UNIQUE INDEX `correo_UNIQUE` (`correo` ASC) )
ENGINE = InnoDB;

DELIMITER //
CREATE PROCEDURE InsertUpdateDeleteUsuario(
    IN p_num_documento INT,
    IN p_tipo_documento VARCHAR(45),
    IN p_seudonimo VARCHAR(45),
    IN p_apellido_usuario VARCHAR(45),
    IN p_nombre_usuario VARCHAR(45),
    IN p_telefono INT,
    IN p_contraseña VARCHAR(45), -- Contraseña sin cifrar
    IN p_correo VARCHAR(45),
    IN p_rol VARCHAR(45),
    IN p_usuario_registra INT
)
BEGIN
    DECLARE p_contraseña_encrypted VARBINARY(20);
    
    -- Cifrar la contraseña antes de insertar o actualizar
    SET p_contraseña_encrypted = AES_ENCRYPT(p_contraseña, 'clave_secreta');
    
    -- Insertar o actualizar según el caso
    IF EXISTS (SELECT * FROM usuarios WHERE num_documento = p_num_documento) THEN
        -- Actualizar
        UPDATE usuarios
        SET tipo_documento = p_tipo_documento,
            seudonimo = p_seudonimo,
            apellido_usuario = p_apellido_usuario,
            nombre_usuario = p_nombre_usuario,
            telefono = p_telefono,
            contraseña = p_contraseña_encrypted,
            correo = p_correo,
            rol = p_rol,
            usuario_registra = p_usuario_registra,
            fecha_modificacion = NOW()
        WHERE num_documento = p_num_documento;
    ELSE
        -- Insertar
        INSERT INTO usuarios (num_documento, tipo_documento, seudonimo, apellido_usuario, nombre_usuario,
            telefono, contraseña, correo, rol, usuario_registra, fecha_registro)
        VALUES (p_num_documento, p_tipo_documento, p_seudonimo, p_apellido_usuario, p_nombre_usuario,
            p_telefono, p_contraseña_encrypted, p_correo, p_rol, p_usuario_registra, NOW());
    END IF;
END;
//
DELIMITER ;
-- Inserción 1
CALL InsertUpdateDeleteUsuario(111111111, 'Cédula de Ciudadanía', 'user1', 'Apellido1', 'Nombre1', 123456789, 'contraseña1', 'correo1@example.com', 'Administrador', 1);

-- Inserción 2
CALL InsertUpdateDeleteUsuario(222222222, 'Cédula de Ciudadanía', 'user2', 'Apellido2', 'Nombre2', 987654321, 'contraseña2', 'correo2@example.com', 'Cliente', 2);

-- Inserción 3
CALL InsertUpdateDeleteUsuario(333333333, 'Cédula de Ciudadanía', 'user3', 'Apellido3', 'Nombre3', 555555555, 'contraseña3', 'correo3@example.com', 'Administrador', 1);

-- Inserción 4
CALL InsertUpdateDeleteUsuario(444444444, 'Cédula de Ciudadanía', 'user4', 'Apellido4', 'Nombre4', 777777777, 'contraseña4', 'correo4@example.com', 'Cliente', 2);

-- Inserción 5
CALL InsertUpdateDeleteUsuario(555555555, 'Cédula de Ciudadanía', 'user5', 'Apellido5', 'Nombre5', 888888888, 'contraseña5', 'correo5@example.com', 'Administrador', 1);

-- Inserción 6
CALL InsertUpdateDeleteUsuario(666666666, 'Cédula de Ciudadanía', 'user6', 'Apellido6', 'Nombre6', 222222222, 'contraseña6', 'correo6@example.com', 'Cliente', 2);

-- Inserción 7
CALL InsertUpdateDeleteUsuario(777777777, 'Cédula de Ciudadanía', 'user7', 'Apellido7', 'Nombre7', 333333333, 'contraseña7', 'correo7@example.com', 'Administrador', 1);

-- Inserción 8
CALL InsertUpdateDeleteUsuario(888888888, 'Cédula de Ciudadanía', 'user8', 'Apellido8', 'Nombre8', 444444444, 'contraseña8', 'correo8@example.com', 'Cliente', 2);

-- Inserción 9
CALL InsertUpdateDeleteUsuario(999999999, 'Cédula de Ciudadanía', 'user9', 'Apellido9', 'Nombre9', 666666666, 'contraseña9', 'correo9@example.com', 'Administrador', 1);

-- Inserción 10
CALL InsertUpdateDeleteUsuario(123456789, 'Cédula de Ciudadanía', 'user10', 'Apellido10', 'Nombre10', 555555555, 'contraseña10', 'correo10@example.com', 'Cliente', 2);


-- -----------------------------------------------------
-- Table `categorias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `categorias` (
  `idcategorias` INT NOT NULL AUTO_INCREMENT,
  `nombre_cat` VARCHAR(45) NOT NULL,
  `descripcion_cat` VARCHAR(100) NOT NULL,
  `estado_cat` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idcategorias`))
ENGINE = InnoDB;

DELIMITER //
CREATE PROCEDURE InsertUpdateDeleteCategoria(
    IN p_id INT,
    IN p_nombre_cat VARCHAR(45),
    IN p_descripcion_cat VARCHAR(100),
    IN p_estado_cat VARCHAR(45),
    IN p_opcion CHAR(1)
)
BEGIN
    IF p_opcion = 'i' THEN
        -- Insertar
        INSERT INTO categorias (nombre_cat, descripcion_cat, estado_cat)
        VALUES (p_nombre_cat, p_descripcion_cat, p_estado_cat);
    ELSEIF p_opcion = 'u' THEN
        -- Actualizar
        UPDATE categorias
        SET nombre_cat = p_nombre_cat,
            descripcion_cat = p_descripcion_cat,
            estado_cat = p_estado_cat
        WHERE idcategorias = p_id;
    ELSEIF p_opcion = 'd' THEN
        -- Eliminar
        DELETE FROM categorias WHERE idcategorias = p_id;
    END IF;
END;
//
DELIMITER ;

-- Inserción 1
CALL InsertUpdateDeleteCategoria(NULL, 'Herramientas Manuales', 'Herramientas de mano para tareas de ferretería', 'Activo', 'i');

-- Inserción 2
CALL InsertUpdateDeleteCategoria(NULL, 'Fijaciones y Tornillería', 'Tornillos, clavos y otros elementos de fijación', 'Activo', 'i');

-- Inserción 3
CALL InsertUpdateDeleteCategoria(NULL, 'Pinturas y Acabados', 'Productos para pintura y acabado de superficies', 'Activo', 'i');

-- Inserción 4
CALL InsertUpdateDeleteCategoria(NULL, 'Electricidad y Cableado', 'Elementos eléctricos y materiales de cableado', 'Activo', 'i');

-- Inserción 5
CALL InsertUpdateDeleteCategoria(NULL, 'Fontanería y Tuberías', 'Materiales y herramientas para fontanería', 'Activo', 'i');

-- Inserción 6
CALL InsertUpdateDeleteCategoria(NULL, 'Ferretería General', 'Productos de ferretería variados', 'Activo', 'i');

-- Inserción 7
CALL InsertUpdateDeleteCategoria(NULL, 'Protección y Seguridad', 'Elementos de protección personal y seguridad', 'Activo', 'i');

-- Inserción 8
CALL InsertUpdateDeleteCategoria(NULL, 'Herramientas Eléctricas', 'Herramientas alimentadas por electricidad', 'Activo', 'i');

-- Inserción 9
CALL InsertUpdateDeleteCategoria(NULL, 'Hogar y Jardín', 'Productos para el hogar y el cuidado del jardín', 'Activo', 'i');

-- Inserción 10
CALL InsertUpdateDeleteCategoria(NULL, 'Materiales de Construcción', 'Materiales para proyectos de construcción', 'Activo', 'i');




-- -----------------------------------------------------
-- Table `subcategorias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `subcategorias` (
  `idsubcategorias` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `descripcion` VARCHAR(100) NOT NULL,
  `estado_subcat` VARCHAR(45) NOT NULL,
  `categorias_idcategorias` INT NOT NULL,
  PRIMARY KEY (`idsubcategorias`, `categorias_idcategorias`),
  INDEX `fk_subcategorias_categorias1_idx` (`categorias_idcategorias` ASC) ,
  CONSTRAINT `fk_subcategorias_categorias1`
    FOREIGN KEY (`categorias_idcategorias`)
    REFERENCES `categorias` (`idcategorias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER //
CREATE PROCEDURE InsertUpdateDeleteSubcategoria(
    IN p_id INT,
    IN p_nombre VARCHAR(45),
    IN p_descripcion VARCHAR(100),
    IN p_estado_subcat VARCHAR(45),
    IN p_id_categoria INT,
    IN p_opcion CHAR(1)
)
BEGIN
    IF p_opcion = 'i' THEN
        -- Insertar
        INSERT INTO subcategorias (idsubcategorias, nombre, descripcion, estado_subcat, categorias_idcategorias)
        VALUES (p_id, p_nombre, p_descripcion, p_estado_subcat, p_id_categoria);
    ELSEIF p_opcion = 'u' THEN
        -- Actualizar
        UPDATE subcategorias
        SET nombre = p_nombre,
            descripcion = p_descripcion,
            estado_subcat = p_estado_subcat,
            categorias_idcategorias = p_id_categoria
        WHERE idsubcategorias = p_id AND categorias_idcategorias = p_id_categoria;
    ELSEIF p_opcion = 'd' THEN
        -- Eliminar
        DELETE FROM subcategorias WHERE idsubcategorias = p_id AND categorias_idcategorias = p_id_categoria;
    END IF;
END;
//
DELIMITER ;

-- Inserción 1
CALL InsertUpdateDeleteSubcategoria(1, 'Destornilladores', 'Herramientas manuales para apretar y aflojar tornillos', 'Activo', 1, 'i');

-- Inserción 2
CALL InsertUpdateDeleteSubcategoria(2, 'Clavos y Tornillos', 'Elementos de fijación para carpintería y construcción', 'Activo', 2, 'i');

-- Inserción 3
CALL InsertUpdateDeleteSubcategoria(3, 'Pinturas al Óleo', 'Pinturas de acabado a base de aceite', 'Activo', 3, 'i');

-- Inserción 4
CALL InsertUpdateDeleteSubcategoria(4, 'Cableado Eléctrico', 'Materiales y herramientas para cableado eléctrico', 'Activo', 4, 'i');

-- Inserción 5
CALL InsertUpdateDeleteSubcategoria(5, 'Tuberías de PVC', 'Tuberías de plástico para sistemas de fontanería', 'Activo', 5, 'i');

-- Inserción 6
CALL InsertUpdateDeleteSubcategoria(6, 'Cerraduras de Puertas', 'Cerraduras y sistemas de seguridad para puertas', 'Activo', 6, 'i');

-- Inserción 7
CALL InsertUpdateDeleteSubcategoria(7, 'Cascos de Protección', 'Cascos para la protección en trabajos de construcción', 'Activo', 7, 'i');

-- Inserción 8
CALL InsertUpdateDeleteSubcategoria(8, 'Taladros Eléctricos', 'Herramientas eléctricas para perforar superficies', 'Activo', 8, 'i');

-- Inserción 9
CALL InsertUpdateDeleteSubcategoria(9, 'Herramientas de Jardín', 'Herramientas para el cuidado y mantenimiento del jardín', 'Activo', 9, 'i');

-- Inserción 10
CALL InsertUpdateDeleteSubcategoria(10, 'Ladrillos y Bloques', 'Materiales de construcción para levantar muros', 'Activo', 10, 'i');


-- -----------------------------------------------------
-- Table `productos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `productos` (
  `idproductos` INT NOT NULL AUTO_INCREMENT,
  `nombre_producto` VARCHAR(45) NOT NULL,
  `marca` VARCHAR(45) NOT NULL,
  `referencia` VARCHAR(45) NOT NULL,
  `descripcion` TEXT(500) NOT NULL,
  `precio` INT NOT NULL,
  `cantidad` INT NOT NULL,
  `subcategorias_idsubcategorias` INT NOT NULL,
  PRIMARY KEY (`idproductos`, `subcategorias_idsubcategorias`),
  INDEX `fk_productos_subcategorias1_idx` (`subcategorias_idsubcategorias` ASC) ,
  CONSTRAINT `fk_productos_subcategorias1`
    FOREIGN KEY (`subcategorias_idsubcategorias`)
    REFERENCES `subcategorias` (`idsubcategorias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


DELIMITER //
CREATE TRIGGER after_carrito_compra_insert
AFTER INSERT ON carrito_compra_has_productos
FOR EACH ROW
BEGIN
    UPDATE productos
    SET cantidad = cantidad - NEW.cantidad
    WHERE idproductos = NEW.productos_idproductos;
END;
//
DELIMITER ;



  DELIMITER //
  CREATE PROCEDURE InsertUpdateDeleteProducto(
      IN p_id INT,
      IN p_nombre_producto VARCHAR(45),
      IN p_marca VARCHAR(45),
      IN p_referencia VARCHAR(45),
      IN p_descripcion TEXT,
      IN p_precio INT,
      IN p_cantidad INT,
      IN p_id_subcategoria INT,
      IN p_opcion CHAR(1)
  )
  BEGIN
      IF p_opcion = 'i' THEN
          -- Insertar
          INSERT INTO productos (idproductos, nombre_producto, marca, referencia, descripcion, precio, cantidad, subcategorias_idsubcategorias)
          VALUES (p_id, p_nombre_producto, p_marca, p_referencia, p_descripcion, p_precio, p_cantidad, p_id_subcategoria);
      ELSEIF p_opcion = 'u' THEN
          -- Actualizar
          UPDATE productos
          SET nombre_producto = p_nombre_producto,
              marca = p_marca,
              referencia = p_referencia,
              descripcion = p_descripcion,
              precio = p_precio,
              cantidad = p_cantidad,
              subcategorias_idsubcategorias = p_id_subcategoria
          WHERE idproductos = p_id AND subcategorias_idsubcategorias = p_id_subcategoria;
      ELSEIF p_opcion = 'd' THEN
          -- Eliminar
          DELETE FROM productos WHERE idproductos = p_id AND subcategorias_idsubcategorias = p_id_subcategoria;
      END IF;
  END;
  //
  DELIMITER ;

-- Inserción 1
CALL InsertUpdateDeleteProducto(NULL, 'Destornillador Phillips', 'Marca X', 'PH-123', 'Destornillador para cabeza Phillips', 10, 100, 1, 'i');

-- Inserción 2
CALL InsertUpdateDeleteProducto(NULL, 'Clavos 2 pulgadas', 'Marca Y', 'CL-456', 'Clavos de 2 pulgadas para carpintería', 5, 200, 2, 'i');

-- Inserción 3
CALL InsertUpdateDeleteProducto(NULL, 'Pintura al Óleo Roja', 'Marca Z', 'PO-789', 'Pintura al óleo de color rojo', 25, 50, 3, 'i');

-- Inserción 4
CALL InsertUpdateDeleteProducto(NULL, 'Cable Eléctrico 14 AWG', 'Marca A', 'CE-101', 'Cable eléctrico calibre 14', 15, 150, 4, 'i');

-- Inserción 5
CALL InsertUpdateDeleteProducto(NULL, 'Tubería de PVC 1 pulgada', 'Marca B', 'TP-202', 'Tubería de PVC para fontanería', 8, 100, 5, 'i');

-- Inserción 6
CALL InsertUpdateDeleteProducto(NULL, 'Cerradura de Puerta Principal', 'Marca C', 'CP-303', 'Cerradura de seguridad para puertas principales', 30, 20, 6, 'i');

-- Inserción 7
CALL InsertUpdateDeleteProducto(NULL, 'Casco de Protección Amarillo', 'Marca D', 'CPA-404', 'Casco de seguridad de color amarillo', 20, 30, 7, 'i');

-- Inserción 8
CALL InsertUpdateDeleteProducto(NULL, 'Taladro Eléctrico Inalámbrico', 'Marca E', 'TE-505', 'Taladro eléctrico sin cable', 80, 10, 8, 'i');

-- Inserción 9
CALL InsertUpdateDeleteProducto(NULL, 'Herramienta de Jardín - Pala', 'Marca F', 'HJP-606', 'Pala para trabajos de jardinería', 15, 40, 9, 'i');

-- Inserción 10
CALL InsertUpdateDeleteProducto(NULL, 'Ladrillo Cerámico', 'Marca G', 'LC-707', 'Ladrillo cerámico estándar', 2, 1000, 10, 'i');



ALTER TABLE productos
DROP COLUMN imagen;

ALTER TABLE productos
DROP COLUMN fecha_reg_pr;


CREATE TABLE IF NOT EXISTS `imagenes_productos` (
  `idimagen` INT NOT NULL AUTO_INCREMENT,
  `imagen` MEDIUMBLOB NOT NULL,
  `productos_idproductos` INT NOT NULL,
  PRIMARY KEY (`idimagen`),
  INDEX `fk_imagenes_productos_productos1_idx` (`productos_idproductos` ASC),
  CONSTRAINT `fk_imagenes_productos_productos1`
    FOREIGN KEY (`productos_idproductos`)
    REFERENCES `productos` (`idproductos`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION
) ENGINE = InnoDB;

DELIMITER //
CREATE PROCEDURE InsertUpdateDeleteImagenProducto(
    IN p_idimagen INT,
    IN p_imagen MEDIUMBLOB,
    IN p_id_producto INT,
    IN p_opcion CHAR(1)
)
BEGIN
    IF p_opcion = 'i' THEN
        -- Insertar
        INSERT INTO imagenes_productos (idimagen, imagen, productos_idproductos)
        VALUES (p_idimagen, p_imagen, p_id_producto);
    ELSEIF p_opcion = 'u' THEN
        -- Actualizar
        UPDATE imagenes_productos
        SET imagen = p_imagen
        WHERE idimagen = p_idimagen AND productos_idproductos = p_id_producto;
    ELSEIF p_opcion = 'd' THEN
        -- Eliminar
        DELETE FROM imagenes_productos WHERE idimagen = p_idimagen AND productos_idproductos = p_id_producto;
    END IF;
END;
//
DELIMITER ;

-- Inserción 1
CALL InsertUpdateDeleteImagenProducto(1, LOAD_FILE('/ruta/imagen1.jpg'), 1, 'i');

-- Inserción 2
CALL InsertUpdateDeleteImagenProducto(2, LOAD_FILE('/ruta/imagen2.jpg'), 2, 'i');

-- Inserción 3
CALL InsertUpdateDeleteImagenProducto(3, LOAD_FILE('/ruta/imagen3.jpg'), 3, 'i');

-- Inserción 4
CALL InsertUpdateDeleteImagenProducto(4, LOAD_FILE('/ruta/imagen4.jpg'), 4, 'i');

-- Inserción 5
CALL InsertUpdateDeleteImagenProducto(5, LOAD_FILE('/ruta/imagen5.jpg'), 5, 'i');

-- Inserción 6
CALL InsertUpdateDeleteImagenProducto(6, LOAD_FILE('/ruta/imagen6.jpg'), 6, 'i');

-- Inserción 7
CALL InsertUpdateDeleteImagenProducto(7, LOAD_FILE('/ruta/imagen7.jpg'), 7, 'i');

-- Inserción 8
CALL InsertUpdateDeleteImagenProducto(8, LOAD_FILE('/ruta/imagen8.jpg'), 8, 'i');

-- Inserción 9
CALL InsertUpdateDeleteImagenProducto(9, LOAD_FILE('/ruta/imagen9.jpg'), 9, 'i');

-- Inserción 10
CALL InsertUpdateDeleteImagenProducto(10, LOAD_FILE('/ruta/imagen10.jpg'), 10, 'i');



-- -----------------------------------------------------
-- Table `domicilio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `domicilio` (
  `iddomicilio` INT NOT NULL AUTO_INCREMENT,
  `estado` VARCHAR(45) NOT NULL,
  `direccion` VARCHAR(45) NOT NULL,
  `barrio` VARCHAR(45) NOT NULL,
  `ciudad` VARCHAR(45) NOT NULL,
  `fecha_entrega_max` TIMESTAMP NOT NULL,
  `fecha_entrega` VARCHAR(45) NOT NULL,
  `observacion_cli` TEXT NOT NULL,
  `observacion_domi` TEXT NOT NULL,
  PRIMARY KEY (`iddomicilio`))
ENGINE = InnoDB;

DELIMITER //
CREATE PROCEDURE InsertUpdateDeleteDomicilio(
    IN p_id INT,
    IN p_estado VARCHAR(45),
    IN p_direccion VARCHAR(45),
    IN p_barrio VARCHAR(45),
    IN p_ciudad VARCHAR(45),
    IN p_fecha_entrega_max TIMESTAMP,
    IN p_fecha_entrega VARCHAR(45),
    IN p_observacion_cli TEXT,
    IN p_observacion_domi TEXT,
    IN p_opcion CHAR(1)
)
BEGIN
    IF p_opcion = 'i' THEN
        -- Insertar
        INSERT INTO domicilio (iddomicilio, estado, direccion, barrio, ciudad, fecha_entrega_max, fecha_entrega, observacion_cli, observacion_domi)
        VALUES (p_id, p_estado, p_direccion, p_barrio, p_ciudad, p_fecha_entrega_max, p_fecha_entrega, p_observacion_cli, p_observacion_domi);
    ELSEIF p_opcion = 'u' THEN
        -- Actualizar
        UPDATE domicilio
        SET estado = p_estado,
            direccion = p_direccion,
            barrio = p_barrio,
            ciudad = p_ciudad,
            fecha_entrega_max = p_fecha_entrega_max,
            fecha_entrega = p_fecha_entrega,
            observacion_cli = p_observacion_cli,
            observacion_domi = p_observacion_domi
        WHERE iddomicilio = p_id;
    ELSEIF p_opcion = 'd' THEN
        -- Eliminar
        DELETE FROM domicilio WHERE iddomicilio = p_id;
    END IF;
END;
//
DELIMITER ;

-- Inserción 1
CALL InsertUpdateDeleteDomicilio(NULL, 'Pendiente', 'Cra 10 #25-15', 'La Candelaria', 'Bogotá', '2023-08-27 12:00:00', '2023-08-25', 'Llamar antes de llegar', 'Ninguna', 'i');

-- Inserción 2
CALL InsertUpdateDeleteDomicilio(NULL, 'Entregado', 'Cl 5 #21-30', 'El Poblado', 'Medellín', '2023-08-26 14:30:00', '2023-08-25', 'Dejar en la recepción', 'Anotar nombre de la persona', 'i');

-- Inserción 3
CALL InsertUpdateDeleteDomicilio(NULL, 'Pendiente', 'Cra 30 #15-12', 'Centro', 'Cali', '2023-08-30 10:00:00', '2023-08-29', 'Horario de entrega amplio', 'Revisar el paquete antes de firmar', 'i');

-- Inserción 4
CALL InsertUpdateDeleteDomicilio(NULL, 'En Camino', 'Cra 18 #12-45', 'Barrio Obrero', 'Barranquilla', '2023-08-28 11:45:00', '2023-08-27', 'Contactar al número 123456789', 'Verificar la cantidad de productos', 'i');

-- Inserción 5
CALL InsertUpdateDeleteDomicilio(NULL, 'Pendiente', 'Cl 8 #30-22', 'La Victoria', 'Bogotá', '2023-08-29 09:00:00', '2023-08-27', 'Dejar paquete con el portero', 'Solicitar firma al entregar', 'i');

-- Inserción 6
CALL InsertUpdateDeleteDomicilio(NULL, 'Entregado', 'Cra 12 #40-18', 'El Poblado', 'Medellín', '2023-08-28 15:30:00', '2023-08-26', 'Entregar antes de las 4 PM', 'Revisar el estado del producto', 'i');

-- Inserción 7
CALL InsertUpdateDeleteDomicilio(NULL, 'Pendiente', 'Av 5 #15-25', 'Los Alpes', 'Cali', '2023-09-02 13:15:00', '2023-09-01', 'Dejar en la puerta', 'Tomar foto como evidencia', 'i');

-- Inserción 8
CALL InsertUpdateDeleteDomicilio(NULL, 'En Camino', 'Cl 7 #22-19', 'San Roque', 'Barranquilla', '2023-09-01 10:30:00', '2023-08-30', 'Asegurarse de entregar a la persona indicada', 'Registrar el nombre del recibidor', 'i');

-- Inserción 9
CALL InsertUpdateDeleteDomicilio(NULL, 'Entregado', 'Cra 20 #10-5', 'La Soledad', 'Bogotá', '2023-08-31 11:45:00', '2023-08-29', 'No dejar en portería, entregar personalmente', 'Solicitar cédula del cliente', 'i');

-- Inserción 10
CALL InsertUpdateDeleteDomicilio(NULL, 'Pendiente', 'Av 3 #28-30', 'Ciudad Jardín', 'Medellín', '2023-09-03 16:00:00', '2023-09-02', 'Dejar con vecino si no hay nadie', 'Asegurarse de anotar nombre y firma', 'i');

-- -----------------------------------------------------
-- Table `compra`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `compra` (
  `idcompra` INT NOT NULL AUTO_INCREMENT,
  `medio_pago` VARCHAR(45) NOT NULL,
  `valor_compra` VARCHAR(45),
  `estado` VARCHAR(45) NOT NULL,
  `fecha_compra` TIMESTAMP NOT NULL,
  `domicilio_iddomicilio` INT NOT NULL,
  PRIMARY KEY (`idcompra`, `domicilio_iddomicilio`),
  INDEX `fk_compra_domicilio1_idx` (`domicilio_iddomicilio` ASC) ,
  CONSTRAINT `fk_compra_domicilio1`
    FOREIGN KEY (`domicilio_iddomicilio`)
    REFERENCES `domicilio` (`iddomicilio`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER //
CREATE PROCEDURE InsertUpdateDeleteCompra(
    IN p_id INT,
    IN p_medio_pago VARCHAR(45),
    IN p_valor_compra VARCHAR(45),
    IN p_estado VARCHAR(45),
    IN p_fecha_compra TIMESTAMP,
    IN p_domicilio_id INT,
    IN p_opcion CHAR(1)
)
BEGIN
    IF p_opcion = 'i' THEN
        -- Insertar
        INSERT INTO compra (idcompra, medio_pago, valor_compra, estado, fecha_compra, domicilio_iddomicilio)
        VALUES (p_id, p_medio_pago, p_valor_compra, p_estado, p_fecha_compra, p_domicilio_id);
    ELSEIF p_opcion = 'u' THEN
        -- Actualizar
        UPDATE compra
        SET medio_pago = p_medio_pago,
            valor_compra = p_valor_compra,
            estado = p_estado,
            fecha_compra = p_fecha_compra,
            domicilio_iddomicilio = p_domicilio_id
        WHERE idcompra = p_id;
    ELSEIF p_opcion = 'd' THEN
        -- Eliminar
        DELETE FROM compra WHERE idcompra = p_id;
    END IF;
END;
//
DELIMITER ;

-- Inserción 1
CALL InsertUpdateDeleteCompra(NULL, 'Tarjeta de Crédito', '150000', 'Pendiente', '2023-08-27 10:00:00', 1, 'i');

-- Inserción 2
CALL InsertUpdateDeleteCompra(NULL, 'Efectivo', '80000', 'Entregada', '2023-08-25 15:30:00', 2, 'i');

-- Inserción 3
CALL InsertUpdateDeleteCompra(NULL, 'Tarjeta Débito', '120000', 'En Camino', '2023-08-28 14:00:00', 3, 'i');

-- Inserción 4
CALL InsertUpdateDeleteCompra(NULL, 'Transferencia Bancaria', '250000', 'Pendiente', '2023-08-29 11:45:00', 4, 'i');

-- Inserción 5
CALL InsertUpdateDeleteCompra(NULL, 'Efectivo', '60000', 'Entregada', '2023-08-30 13:00:00', 5, 'i');

-- Inserción 6
CALL InsertUpdateDeleteCompra(NULL, 'Tarjeta de Crédito', '180000', 'Pendiente', '2023-08-31 09:30:00', 6, 'i');

-- Inserción 7
CALL InsertUpdateDeleteCompra(NULL, 'Tarjeta Débito', '90000', 'En Camino', '2023-09-01 10:15:00', 7, 'i');

-- Inserción 8
CALL InsertUpdateDeleteCompra(NULL, 'Efectivo', '110000', 'Entregada', '2023-09-02 16:45:00', 8, 'i');

-- Inserción 9
CALL InsertUpdateDeleteCompra(NULL, 'Transferencia Bancaria', '320000', 'Pendiente', '2023-09-03 14:30:00', 9, 'i');

-- Inserción 10
CALL InsertUpdateDeleteCompra(NULL, 'Tarjeta de Crédito', '200000', 'En Camino', '2023-09-04 12:30:00', 10, 'i');


-- -----------------------------------------------------
-- Table `carrito_compra`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carrito_compra` (
  `idcarrito_compra` INT NOT NULL AUTO_INCREMENT,
  `usuarios_num_documento` INT NOT NULL,
  `compra_idcompra` INT NOT NULL,
  PRIMARY KEY (`idcarrito_compra`, `usuarios_num_documento`, `compra_idcompra`),
  INDEX `fk_carrito_compra_usuarios1_idx` (`usuarios_num_documento` ASC) ,
  INDEX `fk_carrito_compra_compra1_idx` (`compra_idcompra` ASC) ,
  CONSTRAINT `fk_carrito_compra_usuarios1`
    FOREIGN KEY (`usuarios_num_documento`)
    REFERENCES `usuarios` (`num_documento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_carrito_compra_compra1`
    FOREIGN KEY (`compra_idcompra`)
    REFERENCES `compra` (`idcompra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER //
CREATE PROCEDURE InsertUpdateDeleteCarritoCompra(
    IN p_id INT,
    IN p_usuarios_num_documento INT,
    IN p_compra_idcompra INT,
    IN p_opcion CHAR(1)
)
BEGIN
    IF p_opcion = 'i' THEN
        -- Insertar
        INSERT INTO carrito_compra (idcarrito_compra, usuarios_num_documento, compra_idcompra)
        VALUES (p_id, p_usuarios_num_documento, p_compra_idcompra);
    ELSEIF p_opcion = 'u' THEN
        -- Actualizar
        UPDATE carrito_compra
        SET usuarios_num_documento = p_usuarios_num_documento,
            compra_idcompra = p_compra_idcompra
        WHERE idcarrito_compra = p_id;
    ELSEIF p_opcion = 'd' THEN
        -- Eliminar
        DELETE FROM carrito_compra WHERE idcarrito_compra = p_id;
    END IF;
END;
//
DELIMITER ;

-- Inserción 1
CALL InsertUpdateDeleteCarritoCompra(NULL, 123456789, 1, 'i');

-- Inserción 2
CALL InsertUpdateDeleteCarritoCompra(NULL, 111111111, 2, 'i');

-- Inserción 3
CALL InsertUpdateDeleteCarritoCompra(NULL, 222222222, 3, 'i');

-- Inserción 4
CALL InsertUpdateDeleteCarritoCompra(NULL, 123456789, 4, 'i');

-- Inserción 5
CALL InsertUpdateDeleteCarritoCompra(NULL, 111111111, 5, 'i');

-- Inserción 6
CALL InsertUpdateDeleteCarritoCompra(NULL, 222222222, 6, 'i');

-- Inserción 7
CALL InsertUpdateDeleteCarritoCompra(NULL, 123456789, 7, 'i');

-- Inserción 8
CALL InsertUpdateDeleteCarritoCompra(NULL, 111111111, 8, 'i');

-- Inserción 9
CALL InsertUpdateDeleteCarritoCompra(NULL, 222222222, 9, 'i');

-- Inserción 10
CALL InsertUpdateDeleteCarritoCompra(NULL, 123456789, 10, 'i');

-- -----------------------------------------------------
-- Table `comentarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `comentarios` (
  `idcomentarios` INT NOT NULL,
  `comentario` TEXT NOT NULL,
  `fecha_comentario` TIMESTAMP NOT NULL,
  `usuarios_num_documento` INT NOT NULL,
  `productos_idproductos` INT NOT NULL,
  PRIMARY KEY (`idcomentarios`, `usuarios_num_documento`, `productos_idproductos`),
  INDEX `fk_comentarios_usuarios1_idx` (`usuarios_num_documento` ASC) ,
  INDEX `fk_comentarios_productos1_idx` (`productos_idproductos` ASC) ,
  CONSTRAINT `fk_comentarios_usuarios1`
    FOREIGN KEY (`usuarios_num_documento`)
    REFERENCES `usuarios` (`num_documento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_comentarios_productos1`
    FOREIGN KEY (`productos_idproductos`)
    REFERENCES `productos` (`idproductos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER //
CREATE PROCEDURE InsertUpdateDeleteComentarios(
    IN p_id INT,
    IN p_comentario TEXT,
    IN p_fecha_comentario TIMESTAMP,
    IN p_usuarios_num_documento INT,
    IN p_productos_idproductos INT,
    IN p_opcion CHAR(1)
)
BEGIN
    IF p_opcion = 'i' THEN
        -- Insertar
        INSERT INTO comentarios (idcomentarios, comentario, fecha_comentario, usuarios_num_documento, productos_idproductos)
        VALUES (p_id, p_comentario, p_fecha_comentario, p_usuarios_num_documento, p_productos_idproductos);
    ELSEIF p_opcion = 'u' THEN
        -- Actualizar
        UPDATE comentarios
        SET comentario = p_comentario,
            fecha_comentario = p_fecha_comentario,
            usuarios_num_documento = p_usuarios_num_documento,
            productos_idproductos = p_productos_idproductos
        WHERE idcomentarios = p_id;
    ELSEIF p_opcion = 'd' THEN
        -- Eliminar
        DELETE FROM comentarios WHERE idcomentarios = p_id;
    END IF;
END;
//
DELIMITER ;

-- Inserción 1
CALL InsertUpdateDeleteComentarios(1, '¡Muy buen producto, lo recomiendo!', '2023-08-27 10:00:00', 123456789, 11, 'i');

-- Inserción 2
CALL InsertUpdateDeleteComentarios(2, 'No era lo que esperaba.', '2023-08-25 15:30:00', 111111111, 2, 'i');

-- Inserción 3
CALL InsertUpdateDeleteComentarios(3, 'Excelente calidad y precio.', '2023-08-28 14:00:00', 222222222, 3, 'i');

-- Inserción 4
CALL InsertUpdateDeleteComentarios(4, 'Buena atención al cliente.', '2023-08-29 11:45:00', 123456789, 4, 'i');

-- Inserción 5
CALL InsertUpdateDeleteComentarios(5, 'No estoy satisfecho con el producto.', '2023-08-30 13:00:00', 111111111, 5, 'i');

-- Inserción 6
CALL InsertUpdateDeleteComentarios(6, 'Me encantó, volveré a comprar.', '2023-08-31 09:30:00', 222222222, 6, 'i');

-- Inserción 7
CALL InsertUpdateDeleteComentarios(7, 'Producto defectuoso, no lo recomiendo.', '2023-09-01 10:15:00', 123456789, 7, 'i');

-- Inserción 8
CALL InsertUpdateDeleteComentarios(8, 'Buen producto a buen precio.', '2023-09-02 16:45:00', 111111111, 8, 'i');

-- Inserción 9
CALL InsertUpdateDeleteComentarios(9, 'Entrega rápida y eficiente.', '2023-09-03 14:30:00', 222222222, 9, 'i');

-- Inserción 10
CALL InsertUpdateDeleteComentarios(10, 'El producto cumplió mis expectativas.', '2023-09-04 12:30:00', 123456789, 10, 'i');


-- -----------------------------------------------------
-- Table `respuestas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `respuestas` (
  `idrespuestas` INT NOT NULL,
  `respuesta` TEXT NOT NULL,
  `comentarios_idcomentarios` INT NOT NULL,
  `comentarios_usuarios_num_documento` INT NOT NULL,
  PRIMARY KEY (`idrespuestas`, `comentarios_idcomentarios`, `comentarios_usuarios_num_documento`),
  INDEX `fk_respuestas_comentarios1_idx` (`comentarios_idcomentarios` ASC, `comentarios_usuarios_num_documento` ASC) ,
  CONSTRAINT `fk_respuestas_comentarios1`
    FOREIGN KEY (`comentarios_idcomentarios` , `comentarios_usuarios_num_documento`)
    REFERENCES `comentarios` (`idcomentarios` , `usuarios_num_documento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER //
CREATE PROCEDURE InsertUpdateDeleteRespuestas(
    IN p_id INT,
    IN p_respuesta TEXT,
    IN p_comentarios_idcomentarios INT,
    IN p_comentarios_usuarios_num_documento INT,
    IN p_opcion CHAR(1)
)
BEGIN
    IF p_opcion = 'i' THEN
        -- Insertar
        INSERT INTO respuestas (idrespuestas, respuesta, comentarios_idcomentarios, comentarios_usuarios_num_documento)
        VALUES (p_id, p_respuesta, p_comentarios_idcomentarios, p_comentarios_usuarios_num_documento);
    ELSEIF p_opcion = 'u' THEN
        -- Actualizar
        UPDATE respuestas
        SET respuesta = p_respuesta
        WHERE idrespuestas = p_id
        AND comentarios_idcomentarios = p_comentarios_idcomentarios
        AND comentarios_usuarios_num_documento = p_comentarios_usuarios_num_documento;
    ELSEIF p_opcion = 'd' THEN
        -- Eliminar
        DELETE FROM respuestas WHERE idrespuestas = p_id
        AND comentarios_idcomentarios = p_comentarios_idcomentarios
        AND comentarios_usuarios_num_documento = p_comentarios_usuarios_num_documento;
    END IF;
END;
//
DELIMITER ;


-- Inserción 1
CALL InsertUpdateDeleteRespuestas(1, 'Gracias por tu feedback.', 1, 123456789, 'i');

-- Inserción 2
CALL InsertUpdateDeleteRespuestas(2, 'Estamos contentos de que te haya gustado.', 2, 111111111, 'i');

-- Inserción 3
CALL InsertUpdateDeleteRespuestas(3, 'Lamentamos que hayas tenido una mala experiencia.', 3, 222222222, 'i');

-- Inserción 4
CALL InsertUpdateDeleteRespuestas(4, 'Agradecemos tu opinión, la tendremos en cuenta.', 4, 123456789, 'i');

-- Inserción 5
CALL InsertUpdateDeleteRespuestas(5, 'Nos esforzaremos para mejorar.', 5, 111111111, 'i');

-- Inserción 6
CALL InsertUpdateDeleteRespuestas(6, '¡Esperamos verte nuevamente pronto!', 6, 222222222, 'i');

-- Inserción 7
CALL InsertUpdateDeleteRespuestas(7, 'Sentimos mucho los inconvenientes.', 7, 123456789, 'i');

-- Inserción 8
CALL InsertUpdateDeleteRespuestas(8, 'Nos alegra que hayas disfrutado de tu compra.', 8, 111111111, 'i');

-- Inserción 9
CALL InsertUpdateDeleteRespuestas(9, 'Gracias por tu sugerencia, la tendremos en cuenta para futuras mejoras.', 9, 222222222, 'i');

-- Inserción 10
CALL InsertUpdateDeleteRespuestas(10, 'Lamentamos que hayas tenido problemas con el producto.', 10, 123456789, 'i');

-- -----------------------------------------------------
-- Table `carrito_compra_has_productos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `carrito_compra_has_productos` (
  `carrito_compra_idcarrito_compra` INT NOT NULL,
  `productos_idproductos` INT NOT NULL,
  `cantidad` INT NOT NULL,
  PRIMARY KEY (`carrito_compra_idcarrito_compra`, `productos_idproductos`),
  INDEX `fk_carrito_compra_has_productos_productos1_idx` (`productos_idproductos` ASC) ,
  INDEX `fk_carrito_compra_has_productos_carrito_compra1_idx` (`carrito_compra_idcarrito_compra` ASC) ,
  CONSTRAINT `fk_carrito_compra_has_productos_carrito_compra1`
    FOREIGN KEY (`carrito_compra_idcarrito_compra`)
    REFERENCES `carrito_compra` (`idcarrito_compra`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_carrito_compra_has_productos_productos1`
    FOREIGN KEY (`productos_idproductos`)
    REFERENCES `productos` (`idproductos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER //
CREATE PROCEDURE InsertUpdateDeleteCarritoCompraProductos(
    IN p_carrito_compra_id INT,
    IN p_productos_id INT,
    IN p_cantidad INT,
    IN p_opcion CHAR(1)
)
BEGIN
    IF p_opcion = 'i' THEN
        -- Insertar
        INSERT INTO carrito_compra_has_productos (carrito_compra_idcarrito_compra, productos_idproductos, cantidad)
        VALUES (p_carrito_compra_id, p_productos_id, p_cantidad);
    ELSEIF p_opcion = 'u' THEN
        -- Actualizar
        UPDATE carrito_compra_has_productos
        SET cantidad = p_cantidad
        WHERE carrito_compra_idcarrito_compra = p_carrito_compra_id
        AND productos_idproductos = p_productos_id;
    ELSEIF p_opcion = 'd' THEN
        -- Eliminar
        DELETE FROM carrito_compra_has_productos WHERE carrito_compra_idcarrito_compra = p_carrito_compra_id
        AND productos_idproductos = p_productos_id;
    END IF;
END;
//
DELIMITER ;

-- Inserción 1
CALL InsertUpdateDeleteCarritoCompraProductos(2, 2, 3, 'i');

-- Inserción 2
CALL InsertUpdateDeleteCarritoCompraProductos(3, 3, 1, 'i');

-- Inserción 3
CALL InsertUpdateDeleteCarritoCompraProductos(4, 4, 2, 'i');

-- Inserción 4
CALL InsertUpdateDeleteCarritoCompraProductos(5, 5, 1, 'i');

-- Inserción 5
CALL InsertUpdateDeleteCarritoCompraProductos(6, 6, 3, 'i');

-- Inserción 6
CALL InsertUpdateDeleteCarritoCompraProductos(7, 7, 2, 'i');

-- Inserción 7
CALL InsertUpdateDeleteCarritoCompraProductos(8, 8, 1, 'i');

-- Inserción 8
CALL InsertUpdateDeleteCarritoCompraProductos(9, 9, 4, 'i');

-- Inserción 9
CALL InsertUpdateDeleteCarritoCompraProductos(10, 10, 2, 'i');

-- Inserción 10
CALL InsertUpdateDeleteCarritoCompraProductos(11, 11, 3, 'i');


ALTER TABLE carrito_compra_has_productos ADD COLUMN cantidad INT NOT NULL;

-- -----------------------------------------------------
-- Table `mod_producto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mod_producto` (
  `idmod_producto` INT NOT NULL AUTO_INCREMENT,
  `fecha_mod` TIMESTAMP NOT NULL,
  `usuarios_num_documento` INT NOT NULL,
  `productos_idproductos` INT NOT NULL,
  PRIMARY KEY (`idmod_producto`, `usuarios_num_documento`, `productos_idproductos`),
  INDEX `fk_mod_producto_usuarios1_idx` (`usuarios_num_documento` ASC) ,
  INDEX `fk_mod_producto_productos1_idx` (`productos_idproductos` ASC) ,
  CONSTRAINT `fk_mod_producto_usuarios1`
    FOREIGN KEY (`usuarios_num_documento`)
    REFERENCES `usuarios` (`num_documento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mod_producto_productos1`
    FOREIGN KEY (`productos_idproductos`)
    REFERENCES `productos` (`idproductos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

ALTER TABLE mod_producto
MODIFY COLUMN fecha_mod TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

DELIMITER //
CREATE TRIGGER after_producto_insert
AFTER INSERT ON productos
FOR EACH ROW
BEGIN
    INSERT INTO mod_producto (fecha_mod, usuarios_num_documento, productos_idproductos)
    VALUES (CURRENT_TIMESTAMP, CAST(SUBSTRING_INDEX(CURRENT_USER(), '@', 1) AS INT), NEW.idproductos);
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER after_producto_update
AFTER UPDATE ON productos
FOR EACH ROW
BEGIN
    INSERT INTO mod_producto (fecha_mod, usuarios_num_documento, productos_idproductos)
    VALUES (CURRENT_TIMESTAMP, CAST(SUBSTRING_INDEX(CURRENT_USER(), '@', 1) AS INT), NEW.idproductos);
END;
//
DELIMITER ;


-- -----------------------------------------------------
-- Table `mod_subcat`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mod_subcat` (
  `idmod_subcat` INT NOT NULL AUTO_INCREMENT,
  `fecha_modsub` TIMESTAMP NOT NULL,
  `usuarios_num_documento` INT NOT NULL,
  `subcategorias_idsubcategorias` INT NOT NULL,
  PRIMARY KEY (`idmod_subcat`, `usuarios_num_documento`, `subcategorias_idsubcategorias`),
  INDEX `fk_mod_subcat_usuarios1_idx` (`usuarios_num_documento` ASC) ,
  INDEX `fk_mod_subcat_subcategorias1_idx` (`subcategorias_idsubcategorias` ASC) ,
  CONSTRAINT `fk_mod_subcat_usuarios1`
    FOREIGN KEY (`usuarios_num_documento`)
    REFERENCES `usuarios` (`num_documento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mod_subcat_subcategorias1`
    FOREIGN KEY (`subcategorias_idsubcategorias`)
    REFERENCES `subcategorias` (`idsubcategorias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE TRIGGER after_subcategoria_insert_update
AFTER INSERT ON subcategorias
FOR EACH ROW
BEGIN
    INSERT INTO mod_subcat (fecha_modsub, usuarios_num_documento, subcategorias_idsubcategorias)
    VALUES (CURRENT_TIMESTAMP, CAST(SUBSTRING_INDEX(CURRENT_USER(), '@', 1) AS INT), NEW.idsubcategorias);
END;


DELIMITER //
CREATE TRIGGER after_subcategoria_update
AFTER UPDATE ON subcategorias
FOR EACH ROW
BEGIN
    IF NEW.descripcion != OLD.descripcion OR NEW.estado_subcat != OLD.estado_subcat THEN
        INSERT INTO mod_subcat (fecha_modsub, usuarios_num_documento, subcategorias_idsubcategorias)
        VALUES (CURRENT_TIMESTAMP, CAST(SUBSTRING_INDEX(CURRENT_USER(), '@', 1) AS INT), NEW.idsubcategorias);
    END IF;
END;
//
DELIMITER ;


-- -----------------------------------------------------
-- Table `mod_cat`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mod_cat` (
  `idmod_cat` INT NOT NULL,
  `fecha_mod_cat` TIMESTAMP NOT NULL,
  `usuarios_num_documento` INT NOT NULL,
  `categorias_idcategorias` INT NOT NULL,
  PRIMARY KEY (`idmod_cat`, `usuarios_num_documento`, `categorias_idcategorias`),
  INDEX `fk_mod_cat_usuarios1_idx` (`usuarios_num_documento` ASC) ,
  INDEX `fk_mod_cat_categorias1_idx` (`categorias_idcategorias` ASC) ,
  CONSTRAINT `fk_mod_cat_usuarios1`
    FOREIGN KEY (`usuarios_num_documento`)
    REFERENCES `usuarios` (`num_documento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_mod_cat_categorias1`
    FOREIGN KEY (`categorias_idcategorias`)
    REFERENCES `categorias` (`idcategorias`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

DELIMITER //
CREATE TRIGGER after_mod_cat_insert
AFTER INSERT ON mod_cat
FOR EACH ROW
BEGIN
    INSERT INTO mod_cat_audit (accion, fecha, usuarios_num_documento, categorias_idcategorias)
    VALUES ('INSERT', CURRENT_TIMESTAMP, NEW.usuarios_num_documento, NEW.categorias_idcategorias);
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER after_mod_cat_update
AFTER UPDATE ON mod_cat
FOR EACH ROW
BEGIN
    INSERT INTO mod_cat_audit (accion, fecha, usuarios_num_documento, categorias_idcategorias)
    VALUES ('UPDATE', CURRENT_TIMESTAMP, NEW.usuarios_num_documento, NEW.categorias_idcategorias);
END;
//
DELIMITER ;



SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
